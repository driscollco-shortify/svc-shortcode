// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/driscollco-shortify/svc-shortcode/internal/interfaces (interfaces: Bundle)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock-bundle.go -package=mocks . Bundle
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	cache "github.com/driscollco-core/cache"
	fireStore "github.com/driscollco-core/firestore"
	gcpBucket "github.com/driscollco-core/gcp-bucket"
	cloudTasks "github.com/driscollco-core/gcp-cloud-tasks"
	gcpPubSub "github.com/driscollco-core/gcp-pub-sub"
	grafana "github.com/driscollco-core/grafana"
	log "github.com/driscollco-core/log"
	gomock "go.uber.org/mock/gomock"
)

// MockBundle is a mock of Bundle interface.
type MockBundle struct {
	ctrl     *gomock.Controller
	recorder *MockBundleMockRecorder
	isgomock struct{}
}

// MockBundleMockRecorder is the mock recorder for MockBundle.
type MockBundleMockRecorder struct {
	mock *MockBundle
}

// NewMockBundle creates a new mock instance.
func NewMockBundle(ctrl *gomock.Controller) *MockBundle {
	mock := &MockBundle{ctrl: ctrl}
	mock.recorder = &MockBundleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBundle) EXPECT() *MockBundleMockRecorder {
	return m.recorder
}

// Attribute mocks base method.
func (m *MockBundle) Attribute(key string, val any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Attribute", key, val)
}

// Attribute indicates an expected call of Attribute.
func (mr *MockBundleMockRecorder) Attribute(key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attribute", reflect.TypeOf((*MockBundle)(nil).Attribute), key, val)
}

// Bucket mocks base method.
func (m *MockBundle) Bucket(name string) gcpBucket.Bucket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bucket", name)
	ret0, _ := ret[0].(gcpBucket.Bucket)
	return ret0
}

// Bucket indicates an expected call of Bucket.
func (mr *MockBundleMockRecorder) Bucket(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bucket", reflect.TypeOf((*MockBundle)(nil).Bucket), name)
}

// Cache mocks base method.
func (m *MockBundle) Cache() cache.Cache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cache")
	ret0, _ := ret[0].(cache.Cache)
	return ret0
}

// Cache indicates an expected call of Cache.
func (mr *MockBundleMockRecorder) Cache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cache", reflect.TypeOf((*MockBundle)(nil).Cache))
}

// CloudTasksQueue mocks base method.
func (m *MockBundle) CloudTasksQueue(name string) cloudTasks.Queue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudTasksQueue", name)
	ret0, _ := ret[0].(cloudTasks.Queue)
	return ret0
}

// CloudTasksQueue indicates an expected call of CloudTasksQueue.
func (mr *MockBundleMockRecorder) CloudTasksQueue(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudTasksQueue", reflect.TypeOf((*MockBundle)(nil).CloudTasksQueue), name)
}

// Db mocks base method.
func (m *MockBundle) Db() fireStore.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Db")
	ret0, _ := ret[0].(fireStore.Client)
	return ret0
}

// Db indicates an expected call of Db.
func (mr *MockBundleMockRecorder) Db() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Db", reflect.TypeOf((*MockBundle)(nil).Db))
}

// Log mocks base method.
func (m *MockBundle) Log() log.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(log.Log)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockBundleMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockBundle)(nil).Log))
}

// Metric mocks base method.
func (m *MockBundle) Metric(name string) grafana.Metric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metric", name)
	ret0, _ := ret[0].(grafana.Metric)
	return ret0
}

// Metric indicates an expected call of Metric.
func (mr *MockBundleMockRecorder) Metric(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metric", reflect.TypeOf((*MockBundle)(nil).Metric), name)
}

// PubSubTopic mocks base method.
func (m *MockBundle) PubSubTopic(topic string) gcpPubSub.Sender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSubTopic", topic)
	ret0, _ := ret[0].(gcpPubSub.Sender)
	return ret0
}

// PubSubTopic indicates an expected call of PubSubTopic.
func (mr *MockBundleMockRecorder) PubSubTopic(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubTopic", reflect.TypeOf((*MockBundle)(nil).PubSubTopic), topic)
}

// SendProcessGroupMessage mocks base method.
func (m *MockBundle) SendProcessGroupMessage(to, messageType string, msg any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendProcessGroupMessage", to, messageType, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendProcessGroupMessage indicates an expected call of SendProcessGroupMessage.
func (mr *MockBundleMockRecorder) SendProcessGroupMessage(to, messageType, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendProcessGroupMessage", reflect.TypeOf((*MockBundle)(nil).SendProcessGroupMessage), to, messageType, msg)
}

// Span mocks base method.
func (m *MockBundle) Span(name string) grafana.Span {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Span", name)
	ret0, _ := ret[0].(grafana.Span)
	return ret0
}

// Span indicates an expected call of Span.
func (mr *MockBundleMockRecorder) Span(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Span", reflect.TypeOf((*MockBundle)(nil).Span), name)
}
