// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/driscollco-shortify/svc-shortcode/internal/interfaces (interfaces: Request)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock-request.go -package=mocks . Request
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	tls "crypto/tls"
	io "io"
	multipart "mime/multipart"
	reflect "reflect"

	fiber "github.com/gofiber/fiber/v2"
	fasthttp "github.com/valyala/fasthttp"
	gomock "go.uber.org/mock/gomock"
)

// MockRequest is a mock of Request interface.
type MockRequest struct {
	ctrl     *gomock.Controller
	recorder *MockRequestMockRecorder
	isgomock struct{}
}

// MockRequestMockRecorder is the mock recorder for MockRequest.
type MockRequestMockRecorder struct {
	mock *MockRequest
}

// NewMockRequest creates a new mock instance.
func NewMockRequest(ctrl *gomock.Controller) *MockRequest {
	mock := &MockRequest{ctrl: ctrl}
	mock.recorder = &MockRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequest) EXPECT() *MockRequestMockRecorder {
	return m.recorder
}

// Accepts mocks base method.
func (m *MockRequest) Accepts(offers ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range offers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Accepts", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Accepts indicates an expected call of Accepts.
func (mr *MockRequestMockRecorder) Accepts(offers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accepts", reflect.TypeOf((*MockRequest)(nil).Accepts), offers...)
}

// AcceptsCharsets mocks base method.
func (m *MockRequest) AcceptsCharsets(offers ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range offers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptsCharsets", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// AcceptsCharsets indicates an expected call of AcceptsCharsets.
func (mr *MockRequestMockRecorder) AcceptsCharsets(offers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptsCharsets", reflect.TypeOf((*MockRequest)(nil).AcceptsCharsets), offers...)
}

// AcceptsEncodings mocks base method.
func (m *MockRequest) AcceptsEncodings(offers ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range offers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptsEncodings", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// AcceptsEncodings indicates an expected call of AcceptsEncodings.
func (mr *MockRequestMockRecorder) AcceptsEncodings(offers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptsEncodings", reflect.TypeOf((*MockRequest)(nil).AcceptsEncodings), offers...)
}

// AcceptsLanguages mocks base method.
func (m *MockRequest) AcceptsLanguages(offers ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range offers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptsLanguages", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// AcceptsLanguages indicates an expected call of AcceptsLanguages.
func (mr *MockRequestMockRecorder) AcceptsLanguages(offers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptsLanguages", reflect.TypeOf((*MockRequest)(nil).AcceptsLanguages), offers...)
}

// AllParams mocks base method.
func (m *MockRequest) AllParams() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllParams")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// AllParams indicates an expected call of AllParams.
func (mr *MockRequestMockRecorder) AllParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllParams", reflect.TypeOf((*MockRequest)(nil).AllParams))
}

// App mocks base method.
func (m *MockRequest) App() *fiber.App {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "App")
	ret0, _ := ret[0].(*fiber.App)
	return ret0
}

// App indicates an expected call of App.
func (mr *MockRequestMockRecorder) App() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "App", reflect.TypeOf((*MockRequest)(nil).App))
}

// Append mocks base method.
func (m *MockRequest) Append(field string, values ...string) {
	m.ctrl.T.Helper()
	varargs := []any{field}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Append", varargs...)
}

// Append indicates an expected call of Append.
func (mr *MockRequestMockRecorder) Append(field any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{field}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockRequest)(nil).Append), varargs...)
}

// Attachment mocks base method.
func (m *MockRequest) Attachment(filename ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range filename {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Attachment", varargs...)
}

// Attachment indicates an expected call of Attachment.
func (mr *MockRequestMockRecorder) Attachment(filename ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attachment", reflect.TypeOf((*MockRequest)(nil).Attachment), filename...)
}

// BaseURL mocks base method.
func (m *MockRequest) BaseURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// BaseURL indicates an expected call of BaseURL.
func (mr *MockRequestMockRecorder) BaseURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseURL", reflect.TypeOf((*MockRequest)(nil).BaseURL))
}

// Bind mocks base method.
func (m *MockRequest) Bind(vars fiber.Map) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", vars)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockRequestMockRecorder) Bind(vars any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockRequest)(nil).Bind), vars)
}

// Body mocks base method.
func (m *MockRequest) Body() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockRequestMockRecorder) Body() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockRequest)(nil).Body))
}

// BodyParser mocks base method.
func (m *MockRequest) BodyParser(out any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BodyParser", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// BodyParser indicates an expected call of BodyParser.
func (mr *MockRequestMockRecorder) BodyParser(out any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BodyParser", reflect.TypeOf((*MockRequest)(nil).BodyParser), out)
}

// BodyRaw mocks base method.
func (m *MockRequest) BodyRaw() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BodyRaw")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// BodyRaw indicates an expected call of BodyRaw.
func (mr *MockRequestMockRecorder) BodyRaw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BodyRaw", reflect.TypeOf((*MockRequest)(nil).BodyRaw))
}

// ClearCookie mocks base method.
func (m *MockRequest) ClearCookie(key ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range key {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ClearCookie", varargs...)
}

// ClearCookie indicates an expected call of ClearCookie.
func (mr *MockRequestMockRecorder) ClearCookie(key ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCookie", reflect.TypeOf((*MockRequest)(nil).ClearCookie), key...)
}

// ClientHelloInfo mocks base method.
func (m *MockRequest) ClientHelloInfo() *tls.ClientHelloInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientHelloInfo")
	ret0, _ := ret[0].(*tls.ClientHelloInfo)
	return ret0
}

// ClientHelloInfo indicates an expected call of ClientHelloInfo.
func (mr *MockRequestMockRecorder) ClientHelloInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientHelloInfo", reflect.TypeOf((*MockRequest)(nil).ClientHelloInfo))
}

// Context mocks base method.
func (m *MockRequest) Context() *fasthttp.RequestCtx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(*fasthttp.RequestCtx)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRequestMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRequest)(nil).Context))
}

// Cookie mocks base method.
func (m *MockRequest) Cookie(cookie *fiber.Cookie) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cookie", cookie)
}

// Cookie indicates an expected call of Cookie.
func (mr *MockRequestMockRecorder) Cookie(cookie any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cookie", reflect.TypeOf((*MockRequest)(nil).Cookie), cookie)
}

// CookieParser mocks base method.
func (m *MockRequest) CookieParser(out any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CookieParser", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// CookieParser indicates an expected call of CookieParser.
func (mr *MockRequestMockRecorder) CookieParser(out any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CookieParser", reflect.TypeOf((*MockRequest)(nil).CookieParser), out)
}

// Cookies mocks base method.
func (m *MockRequest) Cookies(key string, defaultValue ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range defaultValue {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Cookies", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Cookies indicates an expected call of Cookies.
func (mr *MockRequestMockRecorder) Cookies(key any, defaultValue ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, defaultValue...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cookies", reflect.TypeOf((*MockRequest)(nil).Cookies), varargs...)
}

// Download mocks base method.
func (m *MockRequest) Download(file string, filename ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{file}
	for _, a := range filename {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Download", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Download indicates an expected call of Download.
func (mr *MockRequestMockRecorder) Download(file any, filename ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{file}, filename...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockRequest)(nil).Download), varargs...)
}

// FormFile mocks base method.
func (m *MockRequest) FormFile(key string) (*multipart.FileHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormFile", key)
	ret0, _ := ret[0].(*multipart.FileHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormFile indicates an expected call of FormFile.
func (mr *MockRequestMockRecorder) FormFile(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormFile", reflect.TypeOf((*MockRequest)(nil).FormFile), key)
}

// FormValue mocks base method.
func (m *MockRequest) FormValue(key string, defaultValue ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range defaultValue {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FormValue", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormValue indicates an expected call of FormValue.
func (mr *MockRequestMockRecorder) FormValue(key any, defaultValue ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, defaultValue...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormValue", reflect.TypeOf((*MockRequest)(nil).FormValue), varargs...)
}

// Format mocks base method.
func (m *MockRequest) Format(body any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format", body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Format indicates an expected call of Format.
func (mr *MockRequestMockRecorder) Format(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockRequest)(nil).Format), body)
}

// Fresh mocks base method.
func (m *MockRequest) Fresh() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fresh")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Fresh indicates an expected call of Fresh.
func (mr *MockRequestMockRecorder) Fresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fresh", reflect.TypeOf((*MockRequest)(nil).Fresh))
}

// Get mocks base method.
func (m *MockRequest) Get(key string, defaultValue ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range defaultValue {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRequestMockRecorder) Get(key any, defaultValue ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, defaultValue...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRequest)(nil).Get), varargs...)
}

// GetReqHeaders mocks base method.
func (m *MockRequest) GetReqHeaders() map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReqHeaders")
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// GetReqHeaders indicates an expected call of GetReqHeaders.
func (mr *MockRequestMockRecorder) GetReqHeaders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReqHeaders", reflect.TypeOf((*MockRequest)(nil).GetReqHeaders))
}

// GetRespHeader mocks base method.
func (m *MockRequest) GetRespHeader(key string, defaultValue ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range defaultValue {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRespHeader", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRespHeader indicates an expected call of GetRespHeader.
func (mr *MockRequestMockRecorder) GetRespHeader(key any, defaultValue ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, defaultValue...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRespHeader", reflect.TypeOf((*MockRequest)(nil).GetRespHeader), varargs...)
}

// GetRespHeaders mocks base method.
func (m *MockRequest) GetRespHeaders() map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRespHeaders")
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// GetRespHeaders indicates an expected call of GetRespHeaders.
func (mr *MockRequestMockRecorder) GetRespHeaders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRespHeaders", reflect.TypeOf((*MockRequest)(nil).GetRespHeaders))
}

// GetRouteURL mocks base method.
func (m *MockRequest) GetRouteURL(routeName string, params fiber.Map) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteURL", routeName, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteURL indicates an expected call of GetRouteURL.
func (mr *MockRequestMockRecorder) GetRouteURL(routeName, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteURL", reflect.TypeOf((*MockRequest)(nil).GetRouteURL), routeName, params)
}

// Hostname mocks base method.
func (m *MockRequest) Hostname() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hostname")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hostname indicates an expected call of Hostname.
func (mr *MockRequestMockRecorder) Hostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hostname", reflect.TypeOf((*MockRequest)(nil).Hostname))
}

// IP mocks base method.
func (m *MockRequest) IP() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IP")
	ret0, _ := ret[0].(string)
	return ret0
}

// IP indicates an expected call of IP.
func (mr *MockRequestMockRecorder) IP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IP", reflect.TypeOf((*MockRequest)(nil).IP))
}

// IPs mocks base method.
func (m *MockRequest) IPs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// IPs indicates an expected call of IPs.
func (mr *MockRequestMockRecorder) IPs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPs", reflect.TypeOf((*MockRequest)(nil).IPs))
}

// Is mocks base method.
func (m *MockRequest) Is(extension string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Is", extension)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Is indicates an expected call of Is.
func (mr *MockRequestMockRecorder) Is(extension any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Is", reflect.TypeOf((*MockRequest)(nil).Is), extension)
}

// IsFromLocal mocks base method.
func (m *MockRequest) IsFromLocal() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFromLocal")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFromLocal indicates an expected call of IsFromLocal.
func (mr *MockRequestMockRecorder) IsFromLocal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFromLocal", reflect.TypeOf((*MockRequest)(nil).IsFromLocal))
}

// IsProxyTrusted mocks base method.
func (m *MockRequest) IsProxyTrusted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProxyTrusted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProxyTrusted indicates an expected call of IsProxyTrusted.
func (mr *MockRequestMockRecorder) IsProxyTrusted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProxyTrusted", reflect.TypeOf((*MockRequest)(nil).IsProxyTrusted))
}

// JSON mocks base method.
func (m *MockRequest) JSON(data any, ctype ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{data}
	for _, a := range ctype {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSON", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// JSON indicates an expected call of JSON.
func (mr *MockRequestMockRecorder) JSON(data any, ctype ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{data}, ctype...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockRequest)(nil).JSON), varargs...)
}

// JSONP mocks base method.
func (m *MockRequest) JSONP(data any, callback ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{data}
	for _, a := range callback {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONP", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// JSONP indicates an expected call of JSONP.
func (mr *MockRequestMockRecorder) JSONP(data any, callback ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{data}, callback...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONP", reflect.TypeOf((*MockRequest)(nil).JSONP), varargs...)
}

// Links mocks base method.
func (m *MockRequest) Links(link ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range link {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Links", varargs...)
}

// Links indicates an expected call of Links.
func (mr *MockRequestMockRecorder) Links(link ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Links", reflect.TypeOf((*MockRequest)(nil).Links), link...)
}

// Locals mocks base method.
func (m *MockRequest) Locals(key any, value ...any) any {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range value {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Locals", varargs...)
	ret0, _ := ret[0].(any)
	return ret0
}

// Locals indicates an expected call of Locals.
func (mr *MockRequestMockRecorder) Locals(key any, value ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, value...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locals", reflect.TypeOf((*MockRequest)(nil).Locals), varargs...)
}

// Location mocks base method.
func (m *MockRequest) Location(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Location", path)
}

// Location indicates an expected call of Location.
func (mr *MockRequestMockRecorder) Location(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockRequest)(nil).Location), path)
}

// Method mocks base method.
func (m *MockRequest) Method(override ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range override {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Method", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Method indicates an expected call of Method.
func (mr *MockRequestMockRecorder) Method(override ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Method", reflect.TypeOf((*MockRequest)(nil).Method), override...)
}

// MultipartForm mocks base method.
func (m *MockRequest) MultipartForm() (*multipart.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipartForm")
	ret0, _ := ret[0].(*multipart.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipartForm indicates an expected call of MultipartForm.
func (mr *MockRequestMockRecorder) MultipartForm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipartForm", reflect.TypeOf((*MockRequest)(nil).MultipartForm))
}

// Next mocks base method.
func (m *MockRequest) Next() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(error)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockRequestMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRequest)(nil).Next))
}

// OriginalURL mocks base method.
func (m *MockRequest) OriginalURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OriginalURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// OriginalURL indicates an expected call of OriginalURL.
func (mr *MockRequestMockRecorder) OriginalURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OriginalURL", reflect.TypeOf((*MockRequest)(nil).OriginalURL))
}

// Params mocks base method.
func (m *MockRequest) Params(key string, defaultValue ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range defaultValue {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Params", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Params indicates an expected call of Params.
func (mr *MockRequestMockRecorder) Params(key any, defaultValue ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, defaultValue...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockRequest)(nil).Params), varargs...)
}

// ParamsInt mocks base method.
func (m *MockRequest) ParamsInt(key string, defaultValue ...int) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range defaultValue {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ParamsInt", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParamsInt indicates an expected call of ParamsInt.
func (mr *MockRequestMockRecorder) ParamsInt(key any, defaultValue ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, defaultValue...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParamsInt", reflect.TypeOf((*MockRequest)(nil).ParamsInt), varargs...)
}

// ParamsParser mocks base method.
func (m *MockRequest) ParamsParser(out any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParamsParser", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParamsParser indicates an expected call of ParamsParser.
func (mr *MockRequestMockRecorder) ParamsParser(out any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParamsParser", reflect.TypeOf((*MockRequest)(nil).ParamsParser), out)
}

// Path mocks base method.
func (m *MockRequest) Path(override ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range override {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Path", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockRequestMockRecorder) Path(override ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockRequest)(nil).Path), override...)
}

// Port mocks base method.
func (m *MockRequest) Port() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Port")
	ret0, _ := ret[0].(string)
	return ret0
}

// Port indicates an expected call of Port.
func (mr *MockRequestMockRecorder) Port() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Port", reflect.TypeOf((*MockRequest)(nil).Port))
}

// Protocol mocks base method.
func (m *MockRequest) Protocol() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Protocol")
	ret0, _ := ret[0].(string)
	return ret0
}

// Protocol indicates an expected call of Protocol.
func (mr *MockRequestMockRecorder) Protocol() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Protocol", reflect.TypeOf((*MockRequest)(nil).Protocol))
}

// Queries mocks base method.
func (m *MockRequest) Queries() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Queries")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Queries indicates an expected call of Queries.
func (mr *MockRequestMockRecorder) Queries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queries", reflect.TypeOf((*MockRequest)(nil).Queries))
}

// Query mocks base method.
func (m *MockRequest) Query(key string, defaultValue ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range defaultValue {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockRequestMockRecorder) Query(key any, defaultValue ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, defaultValue...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockRequest)(nil).Query), varargs...)
}

// QueryBool mocks base method.
func (m *MockRequest) QueryBool(key string, defaultValue ...bool) bool {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range defaultValue {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryBool", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// QueryBool indicates an expected call of QueryBool.
func (mr *MockRequestMockRecorder) QueryBool(key any, defaultValue ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, defaultValue...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBool", reflect.TypeOf((*MockRequest)(nil).QueryBool), varargs...)
}

// QueryFloat mocks base method.
func (m *MockRequest) QueryFloat(key string, defaultValue ...float64) float64 {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range defaultValue {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryFloat", varargs...)
	ret0, _ := ret[0].(float64)
	return ret0
}

// QueryFloat indicates an expected call of QueryFloat.
func (mr *MockRequestMockRecorder) QueryFloat(key any, defaultValue ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, defaultValue...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFloat", reflect.TypeOf((*MockRequest)(nil).QueryFloat), varargs...)
}

// QueryInt mocks base method.
func (m *MockRequest) QueryInt(key string, defaultValue ...int) int {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range defaultValue {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryInt", varargs...)
	ret0, _ := ret[0].(int)
	return ret0
}

// QueryInt indicates an expected call of QueryInt.
func (mr *MockRequestMockRecorder) QueryInt(key any, defaultValue ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, defaultValue...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInt", reflect.TypeOf((*MockRequest)(nil).QueryInt), varargs...)
}

// QueryParser mocks base method.
func (m *MockRequest) QueryParser(out any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryParser", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryParser indicates an expected call of QueryParser.
func (mr *MockRequestMockRecorder) QueryParser(out any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryParser", reflect.TypeOf((*MockRequest)(nil).QueryParser), out)
}

// Range mocks base method.
func (m *MockRequest) Range(size int) (fiber.Range, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Range", size)
	ret0, _ := ret[0].(fiber.Range)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Range indicates an expected call of Range.
func (mr *MockRequestMockRecorder) Range(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockRequest)(nil).Range), size)
}

// Redirect mocks base method.
func (m *MockRequest) Redirect(location string, status ...int) error {
	m.ctrl.T.Helper()
	varargs := []any{location}
	for _, a := range status {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Redirect", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Redirect indicates an expected call of Redirect.
func (mr *MockRequestMockRecorder) Redirect(location any, status ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{location}, status...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockRequest)(nil).Redirect), varargs...)
}

// RedirectBack mocks base method.
func (m *MockRequest) RedirectBack(fallback string, status ...int) error {
	m.ctrl.T.Helper()
	varargs := []any{fallback}
	for _, a := range status {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RedirectBack", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedirectBack indicates an expected call of RedirectBack.
func (mr *MockRequestMockRecorder) RedirectBack(fallback any, status ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{fallback}, status...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedirectBack", reflect.TypeOf((*MockRequest)(nil).RedirectBack), varargs...)
}

// RedirectToRoute mocks base method.
func (m *MockRequest) RedirectToRoute(routeName string, params fiber.Map, status ...int) error {
	m.ctrl.T.Helper()
	varargs := []any{routeName, params}
	for _, a := range status {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RedirectToRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedirectToRoute indicates an expected call of RedirectToRoute.
func (mr *MockRequestMockRecorder) RedirectToRoute(routeName, params any, status ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{routeName, params}, status...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedirectToRoute", reflect.TypeOf((*MockRequest)(nil).RedirectToRoute), varargs...)
}

// Render mocks base method.
func (m *MockRequest) Render(name string, bind any, layouts ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{name, bind}
	for _, a := range layouts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Render", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Render indicates an expected call of Render.
func (mr *MockRequestMockRecorder) Render(name, bind any, layouts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name, bind}, layouts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockRequest)(nil).Render), varargs...)
}

// ReqHeaderParser mocks base method.
func (m *MockRequest) ReqHeaderParser(out any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReqHeaderParser", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReqHeaderParser indicates an expected call of ReqHeaderParser.
func (mr *MockRequestMockRecorder) ReqHeaderParser(out any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReqHeaderParser", reflect.TypeOf((*MockRequest)(nil).ReqHeaderParser), out)
}

// Request mocks base method.
func (m *MockRequest) Request() *fasthttp.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request")
	ret0, _ := ret[0].(*fasthttp.Request)
	return ret0
}

// Request indicates an expected call of Request.
func (mr *MockRequestMockRecorder) Request() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockRequest)(nil).Request))
}

// Response mocks base method.
func (m *MockRequest) Response() *fasthttp.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Response")
	ret0, _ := ret[0].(*fasthttp.Response)
	return ret0
}

// Response indicates an expected call of Response.
func (mr *MockRequestMockRecorder) Response() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockRequest)(nil).Response))
}

// RestartRouting mocks base method.
func (m *MockRequest) RestartRouting() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartRouting")
	ret0, _ := ret[0].(error)
	return ret0
}

// RestartRouting indicates an expected call of RestartRouting.
func (mr *MockRequestMockRecorder) RestartRouting() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartRouting", reflect.TypeOf((*MockRequest)(nil).RestartRouting))
}

// Route mocks base method.
func (m *MockRequest) Route() *fiber.Route {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Route")
	ret0, _ := ret[0].(*fiber.Route)
	return ret0
}

// Route indicates an expected call of Route.
func (mr *MockRequestMockRecorder) Route() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockRequest)(nil).Route))
}

// SaveFile mocks base method.
func (m *MockRequest) SaveFile(fileheader *multipart.FileHeader, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", fileheader, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockRequestMockRecorder) SaveFile(fileheader, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockRequest)(nil).SaveFile), fileheader, path)
}

// SaveFileToStorage mocks base method.
func (m *MockRequest) SaveFileToStorage(fileheader *multipart.FileHeader, path string, storage fiber.Storage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFileToStorage", fileheader, path, storage)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFileToStorage indicates an expected call of SaveFileToStorage.
func (mr *MockRequestMockRecorder) SaveFileToStorage(fileheader, path, storage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFileToStorage", reflect.TypeOf((*MockRequest)(nil).SaveFileToStorage), fileheader, path, storage)
}

// Secure mocks base method.
func (m *MockRequest) Secure() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secure")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Secure indicates an expected call of Secure.
func (mr *MockRequestMockRecorder) Secure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secure", reflect.TypeOf((*MockRequest)(nil).Secure))
}

// Send mocks base method.
func (m *MockRequest) Send(body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRequestMockRecorder) Send(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRequest)(nil).Send), body)
}

// SendFile mocks base method.
func (m *MockRequest) SendFile(file string, compress ...bool) error {
	m.ctrl.T.Helper()
	varargs := []any{file}
	for _, a := range compress {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendFile", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendFile indicates an expected call of SendFile.
func (mr *MockRequestMockRecorder) SendFile(file any, compress ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{file}, compress...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFile", reflect.TypeOf((*MockRequest)(nil).SendFile), varargs...)
}

// SendStatus mocks base method.
func (m *MockRequest) SendStatus(status int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendStatus", status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendStatus indicates an expected call of SendStatus.
func (mr *MockRequestMockRecorder) SendStatus(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendStatus", reflect.TypeOf((*MockRequest)(nil).SendStatus), status)
}

// SendStream mocks base method.
func (m *MockRequest) SendStream(stream io.Reader, size ...int) error {
	m.ctrl.T.Helper()
	varargs := []any{stream}
	for _, a := range size {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendStream", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendStream indicates an expected call of SendStream.
func (mr *MockRequestMockRecorder) SendStream(stream any, size ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{stream}, size...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendStream", reflect.TypeOf((*MockRequest)(nil).SendStream), varargs...)
}

// SendString mocks base method.
func (m *MockRequest) SendString(body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendString", body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendString indicates an expected call of SendString.
func (mr *MockRequestMockRecorder) SendString(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendString", reflect.TypeOf((*MockRequest)(nil).SendString), body)
}

// Set mocks base method.
func (m *MockRequest) Set(key, val string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, val)
}

// Set indicates an expected call of Set.
func (mr *MockRequestMockRecorder) Set(key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRequest)(nil).Set), key, val)
}

// SetUserContext mocks base method.
func (m *MockRequest) SetUserContext(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserContext", ctx)
}

// SetUserContext indicates an expected call of SetUserContext.
func (mr *MockRequestMockRecorder) SetUserContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserContext", reflect.TypeOf((*MockRequest)(nil).SetUserContext), ctx)
}

// Stale mocks base method.
func (m *MockRequest) Stale() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stale")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Stale indicates an expected call of Stale.
func (mr *MockRequestMockRecorder) Stale() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stale", reflect.TypeOf((*MockRequest)(nil).Stale))
}

// Status mocks base method.
func (m *MockRequest) Status(status int) *fiber.Ctx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", status)
	ret0, _ := ret[0].(*fiber.Ctx)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockRequestMockRecorder) Status(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockRequest)(nil).Status), status)
}

// String mocks base method.
func (m *MockRequest) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockRequestMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockRequest)(nil).String))
}

// Subdomains mocks base method.
func (m *MockRequest) Subdomains(offset ...int) []string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range offset {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subdomains", varargs...)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Subdomains indicates an expected call of Subdomains.
func (mr *MockRequestMockRecorder) Subdomains(offset ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subdomains", reflect.TypeOf((*MockRequest)(nil).Subdomains), offset...)
}

// Type mocks base method.
func (m *MockRequest) Type(extension string, charset ...string) *fiber.Ctx {
	m.ctrl.T.Helper()
	varargs := []any{extension}
	for _, a := range charset {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Type", varargs...)
	ret0, _ := ret[0].(*fiber.Ctx)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockRequestMockRecorder) Type(extension any, charset ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{extension}, charset...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockRequest)(nil).Type), varargs...)
}

// UserContext mocks base method.
func (m *MockRequest) UserContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// UserContext indicates an expected call of UserContext.
func (mr *MockRequestMockRecorder) UserContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserContext", reflect.TypeOf((*MockRequest)(nil).UserContext))
}

// Vary mocks base method.
func (m *MockRequest) Vary(fields ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Vary", varargs...)
}

// Vary indicates an expected call of Vary.
func (mr *MockRequestMockRecorder) Vary(fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vary", reflect.TypeOf((*MockRequest)(nil).Vary), fields...)
}

// Write mocks base method.
func (m *MockRequest) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockRequestMockRecorder) Write(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockRequest)(nil).Write), p)
}

// WriteString mocks base method.
func (m *MockRequest) WriteString(s string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteString", s)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteString indicates an expected call of WriteString.
func (mr *MockRequestMockRecorder) WriteString(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteString", reflect.TypeOf((*MockRequest)(nil).WriteString), s)
}

// Writef mocks base method.
func (m *MockRequest) Writef(f string, a ...any) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{f}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Writef", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Writef indicates an expected call of Writef.
func (mr *MockRequestMockRecorder) Writef(f any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{f}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Writef", reflect.TypeOf((*MockRequest)(nil).Writef), varargs...)
}

// XHR mocks base method.
func (m *MockRequest) XHR() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XHR")
	ret0, _ := ret[0].(bool)
	return ret0
}

// XHR indicates an expected call of XHR.
func (mr *MockRequestMockRecorder) XHR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XHR", reflect.TypeOf((*MockRequest)(nil).XHR))
}

// XML mocks base method.
func (m *MockRequest) XML(data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XML", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// XML indicates an expected call of XML.
func (mr *MockRequestMockRecorder) XML(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XML", reflect.TypeOf((*MockRequest)(nil).XML), data)
}
